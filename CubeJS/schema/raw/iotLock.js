cube(`raw_iot_Lock`, {
  sql: `select 
  a.id,
  a.device_reference,
  a.friendly_name,
  a.device_type,
  a.serial_number_short,
  a.serial_number_long,
  ad.apartment_community_id as iot_id
  ,a.timestamp,
  a.thermostat_id,
  a.base_type,
  a.hmac_rev_0,
  a.duplicate_audit_detection,
  a.retrieve_audits_without_erase,
  a.main_battery_voltage,
  a.lock_firmware_version,
  a.main_firmware_version,
  a.bluetooth_module_firmware_version,
  a.main_bootloader_firmware_version,
  a.model,
  a.lock_operation_mode,
  a.lock_serial_number,
  a.main_serial_number,
  a.mfg_date,
  a.warranty_activation_date,
  a.hardware_version,
  a.clock_time,
  a.relock,
  a.daylight_savings_time,
  a.dst_start,
  a.dst_end,
  a.next_database_version_timestamp,
  a.configuration_lock_id,
  a.number_of_motor_cycle_counts,
  a.invalid_card_presented_audit,
  a.audit_id_enable,
  a.beeper_en,
  a.status,
  a.configuration_last_change,
  a.connection_status,
  a.clock_time_last_sync,
  a.audit_log_last_update_at,
  a.lock_index,
  a.connecting_timeout,
  a.min_number_of_audits_to_trigger,
  a.report_status_interval,
  a.reader_sensitivity,
  a.ble_credential_enable,
  a.ble_credential_range,
  a.ble_performance,
  a.ble_cred,
  a.ada_delay,
  a.commissioning_method,
  a.main_battery_state,
  a.omit_security_token_request,
  c.device_communication_status,
  a.rtc_time_lost_alert,
  a.rtc_time_lost_alert_last_update,
  b.company_id as apartment_community_id
  from allegion_lock a
  INNER JOIN access_device ad ON ad.id = a.id
  left join ${raw_iot_Apartment_Community.sql()} b on ad.apartment_community_id = b.iot_id
  left join ${raw_iot_device.sql()} c on a.id = c.id`,
    
    dataSource: `postgres_iot`
  });